// Code generated by Kitex v0.7.1. DO NOT EDIT.

package echo

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	echo "kitexcall-issue/kitex_gen/echo"
)

func serviceInfo() *kitex.ServiceInfo {
	return echoServiceInfo
}

var echoServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Echo"
	handlerType := (*echo.Echo)(nil)
	methods := map[string]kitex.MethodInfo{
		"ConvertSint64": kitex.NewMethodInfo(convertSint64Handler, newConvertSint64Args, newConvertSint64Result, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "echo",
		"ServiceFilePath": "",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.7.1",
		Extra:           extra,
	}
	return svcInfo
}

func convertSint64Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(echo.ConvertSint64Request)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(echo.Echo).ConvertSint64(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ConvertSint64Args:
		success, err := handler.(echo.Echo).ConvertSint64(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ConvertSint64Result)
		realResult.Success = success
	}
	return nil
}
func newConvertSint64Args() interface{} {
	return &ConvertSint64Args{}
}

func newConvertSint64Result() interface{} {
	return &ConvertSint64Result{}
}

type ConvertSint64Args struct {
	Req *echo.ConvertSint64Request
}

func (p *ConvertSint64Args) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ConvertSint64Args) Unmarshal(in []byte) error {
	msg := new(echo.ConvertSint64Request)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ConvertSint64Args_Req_DEFAULT *echo.ConvertSint64Request

func (p *ConvertSint64Args) GetReq() *echo.ConvertSint64Request {
	if !p.IsSetReq() {
		return ConvertSint64Args_Req_DEFAULT
	}
	return p.Req
}

func (p *ConvertSint64Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *ConvertSint64Args) GetFirstArgument() interface{} {
	return p.Req
}

type ConvertSint64Result struct {
	Success *echo.ConvertSint64Response
}

var ConvertSint64Result_Success_DEFAULT *echo.ConvertSint64Response

func (p *ConvertSint64Result) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ConvertSint64Result) Unmarshal(in []byte) error {
	msg := new(echo.ConvertSint64Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ConvertSint64Result) GetSuccess() *echo.ConvertSint64Response {
	if !p.IsSetSuccess() {
		return ConvertSint64Result_Success_DEFAULT
	}
	return p.Success
}

func (p *ConvertSint64Result) SetSuccess(x interface{}) {
	p.Success = x.(*echo.ConvertSint64Response)
}

func (p *ConvertSint64Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ConvertSint64Result) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ConvertSint64(ctx context.Context, Req *echo.ConvertSint64Request) (r *echo.ConvertSint64Response, err error) {
	var _args ConvertSint64Args
	_args.Req = Req
	var _result ConvertSint64Result
	if err = p.c.Call(ctx, "ConvertSint64", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
