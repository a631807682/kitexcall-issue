// Code generated by Kitex v0.7.1. DO NOT EDIT.

package multiple2

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	multiple "kitexcall-issue/kitex_gen/multiple"
)

func serviceInfo() *kitex.ServiceInfo {
	return multiple2ServiceInfo
}

var multiple2ServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Multiple2"
	handlerType := (*multiple.Multiple2)(nil)
	methods := map[string]kitex.MethodInfo{
		"Method2": kitex.NewMethodInfo(method2Handler, newMethod2Args, newMethod2Result, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "multiple",
		"ServiceFilePath": "",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.7.1",
		Extra:           extra,
	}
	return svcInfo
}

func method2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(multiple.Request)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(multiple.Multiple2).Method2(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *Method2Args:
		success, err := handler.(multiple.Multiple2).Method2(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*Method2Result)
		realResult.Success = success
	}
	return nil
}
func newMethod2Args() interface{} {
	return &Method2Args{}
}

func newMethod2Result() interface{} {
	return &Method2Result{}
}

type Method2Args struct {
	Req *multiple.Request
}

func (p *Method2Args) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *Method2Args) Unmarshal(in []byte) error {
	msg := new(multiple.Request)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var Method2Args_Req_DEFAULT *multiple.Request

func (p *Method2Args) GetReq() *multiple.Request {
	if !p.IsSetReq() {
		return Method2Args_Req_DEFAULT
	}
	return p.Req
}

func (p *Method2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *Method2Args) GetFirstArgument() interface{} {
	return p.Req
}

type Method2Result struct {
	Success *multiple.Response
}

var Method2Result_Success_DEFAULT *multiple.Response

func (p *Method2Result) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *Method2Result) Unmarshal(in []byte) error {
	msg := new(multiple.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *Method2Result) GetSuccess() *multiple.Response {
	if !p.IsSetSuccess() {
		return Method2Result_Success_DEFAULT
	}
	return p.Success
}

func (p *Method2Result) SetSuccess(x interface{}) {
	p.Success = x.(*multiple.Response)
}

func (p *Method2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Method2Result) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Method2(ctx context.Context, Req *multiple.Request) (r *multiple.Response, err error) {
	var _args Method2Args
	_args.Req = Req
	var _result Method2Result
	if err = p.c.Call(ctx, "Method2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
